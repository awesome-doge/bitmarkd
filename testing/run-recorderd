#!/bin/sh
# test recorderd

ERROR()
{
  printf 'error: '
  # shellcheck disable=SC2059
  printf -- "$@"
  printf '\n'
  exit 1
}

VERBOSE()
{
  # shellcheck disable=SC2059
  [ X"${verbose}" = X"yes" ] && printf -- "$@"
}

USAGE()
{
  if [ -n "$1" ]
  then
    printf 'error: '
    # shellcheck disable=SC2059
    printf -- "$@"
    printf '\n'
  fi
  echo usage: "$(basename "$0")" '[options] recorderd-arguments...'
  echo '       --help             -h            this message'
  echo '       --verbose          -v            more messages'
  echo '       --config=FILE      -c FILE       set configuration file ['"${config}"']'
  echo '       --generate         -g            generate all keys'
  echo '       --debug                          debuging messages'
  exit 1
}


# main program

xdg_home="${XDG_CONFIG_HOME}"
[ -z "${xdg_home}" ] && xdg_home="${HOME}/.config"
[ -d "${xdg_home}" ] || ERROR 'missing directory: "%s" please create first' "${xdg_home}"

verbose=no
debug=no
generate=no
config="${xdg_home}/recorderd/recorderd.conf"
generate_items='generate-identity'

getopt=
case "$(uname)" in
  (FreeBSD|DragonFly)
    getopt=/usr/local/bin/getopt
    ;;
  (NetBSD)
    getopt=/usr/pkg/bin/getopt
    ;;
  (OpenBSD)
    getopt=/usr/local/bin/gnugetopt
    ;;
  (Darwin)
    getopt=/usr/local/opt/gnu-getopt/bin/getopt
    ;;
  (Linux)
    getopt=/usr/bin/getopt
    ;;
  (*)
    ERROR 'OS: %s is not supported' "$(uname)"
    ;;
esac
[ -x "${getopt}" ] || ERROR 'getopt: "%s" is not executable or not installed' "${getopt}"

args=$(${getopt} -o hvc:gD --long=help,verbose,config:,generate,debug -- "$@") || exit 1

# replace the arguments with the parsed values
eval set -- "${args}"

while :
do
  case "$1" in
    (-v|--verbose)
      verbose=yes
      ;;

    (-c|--config)
      case "$2" in
        (%[1-9]|%[1-9][0-9])
          n="${2#%}"
          config="${xdg_home}/recorderd${n}/recorderd.conf"
          ;;
        (%*)
          ERROR 'unsupported config shortcut: %s' "$2"
          ;;
        (*)
          config="$2"
          ;;
      esac
      shift
      ;;

    (-g|--generate)
      generate=yes
      ;;

    (-D|--debug)
      debug=yes
      ;;

    (--)
      shift
      break
      ;;

    (-h|--help)
      USAGE
      ;;

    (*)
      USAGE 'invalid option: %s' "$1"
      ;;
  esac
  shift
done

# verify arguments
[ -f "${config}" ] || USAGE 'configuration file: "%s" does not exist' "${config}"
config_dir=$(dirname "${config}")
VERBOSE 'config dir: "%s"\n' "${config_dir}"

# enable debuging
[ X"${debug}" = X"yes" ] && set -x

# determine if a recorderd is running
pidfile="${config_dir}/recorderd.pid"

pid2=not-running
[ -e "${pidfile}" ] && pid2=$(cat -- "${pidfile}")

for pid in $(pgrep recorderd)
do
  [ X"${pid}" = X"${pid2}" ] && ERROR 'recorderd already running: pid=%s' "${pid}"
done

echo starting recorderd...
rm -f "${pidfile}"
rm -f "${config_dir}/log/recorderd.log"*

# just generate the keys
if [ X"${generate}" = X"yes" ]
then
  for g in ${generate_items}
  do
    (
      cd "${config_dir}" && recorderd --config-file="${config}" "${g}"
    )
  done
  exit 0
fi

# yes or no detection
run_again()
{
  local yorn junk program
  program="$1"
  while :
  do
    # shellcheck disable=SC2034
    read -r -p "Run ${program} again? " yorn junk
    case "${yorn}" in
      ([yY]|[yY][eE][sS])
        return 0
        ;;
      ([nN]|[nN][oO])
        return 1
        ;;
      (*)
        echo 'Please answer yes or no'
        ;;
    esac
  done
}

# finally run the program
while :
do
  export GODEBUG=madvdontneed=1
  recorderd --config-file="${config}" "$@"
  run_again 'recorderd' || break
done
