#!/bin/sh
# test recorderd

ERROR() {
  printf 'error: '
  printf "${@}"
  printf '\n'
  exit 1
}

VERBOSE() {
  [ X"${verbose}" = X"no" ] && return 0
  printf "${@}"
  printf '\n'
}

USAGE() {
  if [ -n "${1}" ]
  then
    printf 'error: '
    printf "${@}"
    printf '\n'
  fi
  cat <<EOF
usage: ${0##*/} [options] recorderd-arguments...
       --help             -h            this message
       --verbose          -v            more messages
       --config=FILE      -c FILE       set configuration file [${config}]
       --generate         -g            generate all keys
       --debug            -D            show debug information
EOF
  exit 1
}


# main program

xdg_home="${XDG_CONFIG_HOME}"
[ -z "${xdg_home}" ] && xdg_home="${HOME}/.config"
[ -d "${xdg_home}" ] || ERROR 'missing directory: "%s" please create first' "${xdg_home}"

verbose=no
debug=no
generate=no
config="${xdg_home}/recorderd/recorderd.conf"
generate_items='generate-identity'

# parse options
while getopts :hvc:gD-: option
do
  # convert long options
  if [ X"${option}" = X"-" ]
  then
    option="${OPTARG%%=*}"
    OPTARG="${OPTARG#${option}}"
    OPTARG="${OPTARG#=}"
  fi
  case "${option}" in
    (v|verbose)
      verbose=yes
      ;;

    (c|config)
      case "${OPTARG}" in
        (%[1-9]|%[1-9][0-9])
          n="${OPTARG#%}"
          config="${xdg_home}/recorderd${n}/recorderd.conf"
          ;;
        (%*)
          ERROR 'unsupported config shortcut: %s' "${OPTARG}"
          ;;
        (*)
          config="${OPTARG}"
          ;;
      esac
      ;;

    (g|generate)
      generate=yes
      ;;

    (--)
      break
      ;;

    (D|debug)
      debug=yes
      ;;

    (h|help)
      USAGE
      ;;

    ('?')
      USAGE 'invalid option: -%s' "${OPTARG}"
      ;;

    (*)
      USAGE 'invalid option: --%s' "${option}"
      ;;
  esac
done

shift $((OPTIND - 1))

# verify arguments
[ ${#} -ne 0 ] && USAGE 'extraneous arguments: %s' "${*}"

[ -f "${config}" ] || USAGE 'configuration file: "%s" does not exist' "${config}"
config_dir=$(dirname "${config}")
VERBOSE 'config dir: "%s"\n' "${config_dir}"

# enable debugging
[ X"${debug}" = X"yes" ] && set -x

# determine if a recorderd is running
pidfile="${config_dir}/recorderd.pid"

pid2=not-running
[ -e "${pidfile}" ] && pid2=$(cat -- "${pidfile}")

for pid in $(pgrep recorderd)
do
  [ X"${pid}" = X"${pid2}" ] && ERROR 'recorderd already running: pid=%s' "${pid}"
done

echo starting recorderd...
rm -f "${pidfile}"
rm -f "${config_dir}/log/recorderd.log"*

# just generate the keys
if [ X"${generate}" = X"yes" ]
then
  for g in ${generate_items}
  do
    (
      cd "${config_dir}" && recorderd --config-file="${config}" "${g}"
    )
  done
  exit 0
fi

# yes or no detection
run_again()
{
  local yorn junk program
  program="$1"
  while :
  do
    read -r -p "Run ${program} again? " yorn junk
    case "${yorn}" in
      ([yY]|[yY][eE][sS])
        return 0
        ;;
      ([nN]|[nN][oO])
        return 1
        ;;
      (*)
        echo 'Please answer yes or no'
        ;;
    esac
  done
}

# finally run the program
while :
do
  export GODEBUG=madvdontneed=1
  recorderd --config-file="${config}" "$@"
  run_again 'recorderd' || break
done
