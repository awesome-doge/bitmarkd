#!/bin/sh
# test bitmarkd

ERROR() {
  printf 'error: '
  printf "${@}"
  printf '\n'
  exit 1
}

VERBOSE() {
  [ X"${verbose}" = X"no" ] && return 0
  printf "${@}"
  printf '\n'
}

USAGE() {
  if [ -n "${1}" ]
  then
    printf 'error: '
    printf "${@}"
    printf '\n'
  fi
  cat <<EOF
usage: ${0##*/} [options] bitmarkd-arguments...
       --help             -h            this message
       --verbose          -v            more messages
       --quiet            -q            less messages
       --config=FILE      -c FILE       set configuration file [${config}]
                                        or %1..%99 or %T1..%T99 or %L1..%L99
       --generate         -g            generate all keys/certificates
       --reset            -r            reset the database
       --from=DIR         -f DIR        reset the database  from this sample
       --sleep=SECONDS    -s SECONDS    start delay
       --debug            -D            show debug information
EOF
  exit 1
}

# main program

xdg_home="${XDG_CONFIG_HOME}"
[ -z "${xdg_home}" ] && xdg_home="${HOME}/.config"
[ -d "${xdg_home}" ] || ERROR 'missing directory: "%s" please create first' "${xdg_home}"

verbose=no
debug=no
quiet=no
reset=no
from=
generate=no
config="${xdg_home}/bitmarkd/bitmarkd.conf"
generate_items='gen-peer-identity gen-rpc-cert gen-proof-identity'
sleep=

# parse options
while getopts :hvqc:grf:s:D-: option
do
  # convert long options
  if [ X"${option}" = X"-" ]
  then
    option="${OPTARG%%=*}"
    OPTARG="${OPTARG#${option}}"
    OPTARG="${OPTARG#=}"
  fi
  case "${option}" in
    (v|verbose)
      verbose=yes
      ;;

    (q|quiet)
      quiet=yes
      verbose=no
      ;;

    (c|config)
      case "${OPTARG}" in
        (%[1-9]|%[1-9][0-9]|%T[1-9]|%T[1-9][0-9]|%L[1-9]|%L[1-9][0-9])
          n="${OPTARG#%}"
          config="${xdg_home}/bitmarkd${n}/bitmarkd.conf"
          ;;
        (%*)
          ERROR 'unsupported config shortcut: %s' "${OPTARG}"
          ;;
        (*)
          config="${OPTARG}"
          ;;
      esac
      ;;

    (g|generate)
      generate=yes
      ;;

    (r|reset)
      reset=yes
      ;;

    (f|from)
      from="${OPTARG}"
      [ -d "${from}" ] || USAGE 'not a levelDB: --from="%s"' "${from}"
      [ -f "${from}/CURRENT" ] || USAGE 'not a levelDB: --from="%S"' "${from}"
      ;;

    (s|sleep)
      sleep="${OPTARG}"
      [ -z "${sleep}" ] && USAGE 'sleep cannot be blank'
      [ -z "$(printf '%s' "${sleep}" | tr -d '[:digit:]')" ] || USAGE 'sleep value: "%s" is not a number' "${sleep}"
      ;;

    (--)
      break
      ;;

    (D|debug)
      debug=yes
      ;;

    (h|help)
      USAGE
      ;;

    ('?')
      USAGE 'invalid option: -%s' "${OPTARG}"
      ;;

    (*)
      USAGE 'invalid option: --%s' "${option}"
      ;;
  esac
done

shift $((OPTIND - 1))

# verify arguments
#[ ${#} -ne 0 ] && USAGE 'extraneous arguments: %s' "${*}"

[ X"${reset}" = X"no" ] && [ -n "${from}" ] && USAGE 'conflicting --from requires --reset'

[ -f "${config}" ] || USAGE 'configuration file: "%s" does not exist' "${config}"
config_dir=$(dirname "${config}")
VERBOSE 'config dir: "%s"' "${config_dir}"

# enable debugging
[ X"${debug}" = X"yes" ] && set -x

# determine if a bitmarkd is running
pidfile="${config_dir}/bitmarkd.pid"

pid2=not-running
[ -e "${pidfile}" ] && pid2=$(cat -- "${pidfile}")

for pid in $(pgrep bitmarkd)
do
  [ X"${pid}" = X"${pid2}" ] && ERROR 'bitmarkd already running: pid=%s' "${pid}"
done

[ X"${quiet}" = X"no" ] && echo starting bitmarkd...
rm -f "${pidfile}"
rm -f "${config_dir}/log/bitmarkd.log"*
if [ X"${reset}" = X"yes" ]
then
  rm -fr "${config_dir}/data"
  mkdir -p "${config_dir}/data"
  [ -n "${from}" ] && rsync -aHx "${from}" "${config_dir}/data/"
  rm -fr "${config_dir}/"*-cache
fi

# just generate the keys
if [ X"${generate}" = X"yes" ]
then
  for g in ${generate_items}
  do
    (
      cd "${config_dir}" && bitmarkd --config-file="${config}" "${g}" "${config_dir}"
    )
  done
  exit 0
fi

# yes or no detection
run_again()
{
  local yorn junk program
  program="$1"
  while :
  do
    read -r -p "Run ${program} again? " yorn junk
    case "${yorn}" in
      ([yY]|[yY][eE][sS])
        return 0
        ;;
      ([nN]|[nN][oO])
        return 1
        ;;
      (*)
        echo 'Please answer yes or no'
        ;;
    esac
  done
}

# delay if running without arguments
[ -n "${sleep}" ] && [ $# -eq 0 ] && sleep "${sleep}"

# finally run the program
cd "${config_dir}" || ERROR 'cannot cd "%s"' "${config_dir}"
while :
do
  [ X"${quiet}" = X"no" ] && printf 'configuration: %s\n' "${config}"
  export GODEBUG=madvdontneed=1
  bitmarkd --config-file="${config}" "$@"
  [ $# -ne 0 ] && break
  rc="$?"
  printf 'rc: %d\n' "${rc}"
  run_again 'bitmarkd' || break
done
