#!/bin/sh
# graph the node with graphviz

ERROR() {
  printf 'error: '
  printf "${@}"
  printf '\n'
  exit 1
}

VERBOSE() {
  [ X"${verbose}" = X"no" ] && return 0
  printf "${@}"
  printf '\n'
}

USAGE() {
  if [ -n "${1}" ]
  then
    printf 'error: '
    printf "${@}"
    printf '\n'
  fi
  cat <<EOF
usage: ${0##*/} [options] host:port
       --help             -h            this message
       --verbose          -v            more messages
       --output=FILE      -o FILE       the output PNG file [${output}]
       --debug            -D            debuging messages
EOF
  exit 1
}


# main program
verbose=no
debug=no
output=graph.png

# parse options
while getopts :hvo:D-: option
do
  # convert long options
  if [ X"${option}" = X"-" ]
  then
    option="${OPTARG%%=*}"
    OPTARG="${OPTARG#${option}}"
    OPTARG="${OPTARG#=}"
  fi
  case "${option}" in
    (v|verbose)
      verbose=yes
      ;;

    (o|output)
      output="${OPTARG}"
      [ -z "${output}" ] && USAGE 'missing output file'
      ;;

    (--)
      break
      ;;

    (D|debug)
      debug=yes
      ;;

    (h|help)
      USAGE
      ;;

    ('?')
      USAGE 'invalid option: -%s' "${OPTARG}"
      ;;

    (*)
      USAGE 'invalid option: --%s' "${option}"
      ;;
  esac
done

shift $((OPTIND - 1))

# verify arguments
#[ ${#} -ne 0 ] && USAGE 'extraneous arguments: %s' "${*}"
[ $# -eq 0 ] && USAGE 'missing argument'
[ $# -gt 1 ] && USAGE 'invalid extraneous arguments: %s' "${*}"

# enable debugging
[ X"${debug}" = X"yes" ] && set -x

server="${1}"

VERBOSE 'server: %s' "${server}"

r=$(curl -sk "https://${server}/bitmarkd/peers?count=100" "https://${server}/bitmarkd/connections?count=100" "https://${server}/bitmarkd/details")
rc="$?"

if [ -z "${r}" ] || [ "${rc}" -ne 0 ]
then
  #printf 'timeout: rc: %s  r: "%s"\n' "${rc}" "${r}"
  ERROR 'cannot retrieve data from: %s' "${server}"
fi

filter='
{p:.[0]|map(.publicKey),c:.[1].connectedTo|map(.server),d:.[2].publicKey} |
(reduce .p[] as $p (""; . + $p + " -> ") + .p[0]) + "\n" +
(.d as $pk | reduce .c[] as $c (""; . + $pk + " -> " + $c + "\n"))
'


filter='
  (.[0] | map(.publicKey)) as $p |
  (reduce .[0][] as $p ({}; . + {($p.publicKey):($p.listeners[0]) | ltrimstr("127.0.0.1:") | ltrimstr("[::1]:")})) as $m |
  (.[1].connectedTo | map(.server)) as $ct |
  (.[2].publicKey) as $pk |
{
  p:($p | map($m[.])),
  ct:($ct | map($m[.])),
  pk:$m[$pk]
}
'

filter_ring='
(reduce .p[] as $p (""; . + $p + " -> ") + .p[0]) + "\n"
'

filter_links='
.pk as $pk |
(reduce .ct[] as $ct (""; . + $pk + " -> " + $ct + "\n"))
'

data=$(printf '%s' "${r}" | jq --slurp "${filter}" 2> /dev/null)

{
  cat <<EOF
digraph {
  subgraph {
    edge [color=green,style=dashed,arrowhead=none,arrowtail=none]
EOF

  printf '%s' "${data}" | jq --raw-output "${filter_ring}" #2> /dev/null
  cat <<EOF
  }
}
EOF
} | circo | grep -v '^}$' | {
  cat
  cat <<EOF
  subgraph {
    edge [color=hotpink,style=bold]
EOF
  printf '%s' "${data}" | jq --raw-output "${filter_links}" #2> /dev/null
  cat <<EOF
  }
}
EOF
} | neato -n -o"${output}" -Tpng
