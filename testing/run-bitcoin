#!/bin/sh
# run local bitcoin in a terminal

ERROR() {
  printf 'error: '
  printf "${@}"
  printf '\n'
  exit 1
}

VERBOSE() {
  [ X"${verbose}" = X"no" ] && return 0
  printf "${@}"
  printf '\n'
}

USAGE() {
  if [ -n "${1}" ]
  then
    printf 'error: '
    printf "${@}"
    printf '\n'
  fi
  cat <<EOF
usage: ${0##*/} [options] bitcoin-arguments...
       --help             -h            this message
       --verbose          -v            more messages
       --config=FILE      -c FILE       set configuration file [${config}]
       --server           -s            start server
       --generate         -g            generate all keys
       --debug                          debuging messages
EOF
  exit 1
}


# main program

xdg_home="${XDG_CONFIG_HOME}"
[ -z "${xdg_home}" ] && xdg_home="${HOME}/.config"
[ -d "${xdg_home}" ] || ERROR 'missing directory: "%s" please create first' "${xdg_home}"

verbose=no
debug=no
config="${xdg_home}/bitcoin/bitcoin.conf"
server=no

# parse options
while getopts :hvc:gsD-: option
do
  # convert long options
  if [ X"${option}" = X"-" ]
  then
    option="${OPTARG%%=*}"
    OPTARG="${OPTARG#${option}}"
    OPTARG="${OPTARG#=}"
  fi
  case "${option}" in
    (v|verbose)
      verbose=yes
      ;;

    (c|config)
      case "${OPTARG}" in
        (%[1-9]|%[1-9][0-9])
          n="${OPTARG#%}"
          config="${xdg_home}/bitcoin${n}/bitcoin.conf"
          ;;
        (%*)
          ERROR 'unsupported config shortcut: %s' "${OPTARG}"
          ;;
        (*)
          config="${OPTARG}"
          ;;
      esac
      ;;

    (g|generate)
      generate=yes
      ;;

    (s|server)
      server=yes
      ;;

    (--)
      break
      ;;

    (D|debug)
      debug=yes
      ;;

    (h|help)
      USAGE
      ;;

    ('?')
      USAGE 'invalid option: -%s' "${OPTARG}"
      ;;

    (*)
      USAGE 'invalid option: --%s' "${option}"
      ;;
  esac
done

shift $((OPTIND - 1))

# verify arguments
#[ ${#} -ne 0 ] && USAGE 'extraneous arguments: %s' "${*}"

[ -f "${config}" ] || USAGE 'configuration file: "%s" does not exist' "${config}"
config_dir=$(dirname "${config}")
VERBOSE 'config dir: %s' "${config_dir}"

# enable debuging
[ X"${debug}" = X"yes" ] && set -x

# determine if a bitcoind is running
pidfile="${config_dir}/regtest/bitcoind.pid"

pid2=not-running
[ -e "${pidfile}" ] && pid2=$(cat -- "${pidfile}")

running=no
for pid in $(pgrep bitcoind)
do
  [ X"${pid}" = X"${pid2}" ] && running=yes && break
done

# if necessary to generate add code here
[ X"${generate}" = X"yes" ] && exit 0

# run the CLI
if [ X"${server}" = X"no" ]
then
  [ X"${running}" = X"no" ] && ERROR 'bitcoind not running'
  exec bitcoin-cli -datadir="${config_dir}" -conf="${config}" "$@"
  exit 0
fi

[ X"${running}" = X"yes" ] && ERROR 'bitcoind already running: pid=%s' "${pid}"

echo starting bitcoind...
rm -f "${pidfile}"
rm -f "${config_dir}/debug.log"*
rm -f "${config_dir}/regtest/debug.log"*

# yes or no detection
run_again()
{
  local yorn junk program
  program="$1"
  while :
  do
    read -r -p "Run ${program} again? " yorn junk
    case "${yorn}" in
      ([yY]|[yY][eE][sS])
        return 0
        ;;
      ([nN]|[nN][oO])
        return 1
        ;;
      (*)
        echo 'Please answer yes or no'
        ;;
    esac
  done
}

# finally run the program
while :
do
  d="$(dirname "${config}")"
  cd "${d}" || ERROR 'cannot cd to: %s' "${d}"
    bitcoind -datadir="${config_dir}" -conf="${config}" "$@"
  rc="$?"
  printf 'rc: %d\n' "${rc}"
  run_again 'bitcoind' || break
done
