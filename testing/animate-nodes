#!/bin/sh
# graph the node with graphviz

ERROR() {
  printf 'error: '
  printf "${@}"
  printf '\n'
  exit 1
}

VERBOSE() {
  [ X"${verbose}" = X"no" ] && return 0
  printf "${@}"
  printf '\n'
}

USAGE() {
  if [ -n "${1}" ]
  then
    printf 'error: '
    printf "${@}"
    printf '\n'
  fi
  cat <<EOF
usage: ${0##*/} [options]
       --help             -h            this message
       --verbose          -v            more messages
       --output=FILE      -o FILE       the output PNG file [${output}]
       --debug            -D            debuging messages
EOF
  exit 1
}


# main program
verbose=no
debug=no
output=nodes.mpeg

# parse options
while getopts :hvo:D-: option
do
  # convert long options
  if [ X"${option}" = X"-" ]
  then
    option="${OPTARG%%=*}"
    OPTARG="${OPTARG#${option}}"
    OPTARG="${OPTARG#=}"
  fi
  case "${option}" in
    (v|verbose)
      verbose=yes
      ;;

    (o|output)
      output="${OPTARG}"
      [ -z "${output}" ] && USAGE 'missing output file'
      ;;

    (--)
      break
      ;;

    (D|debug)
      debug=yes
      ;;

    (h|help)
      USAGE
      ;;

    ('?')
      USAGE 'invalid option: -%s' "${OPTARG}"
      ;;

    (*)
      USAGE 'invalid option: --%s' "${option}"
      ;;
  esac
done

shift $((OPTIND - 1))

# verify arguments
[ ${#} -ne 0 ] && USAGE 'extraneous arguments: %s' "${*}"

# enable debugging
[ X"${debug}" = X"yes" ] && set -x

# create frames
rm -f frame-*.png
for f in $(seq 1 100)
do
  rm -f graph-*.png
  for i in $(seq 21 32)
  do
    graph-nodes --output="$(printf 'graph-%02d.png' "${i}")" "127.0.0.1:${i}31"
  done

  frame="$(printf 'frame-%03d.png' "${f}")"

  VERBOSE 'frame: %s' "${frame}"
  montage graph-*.png -geometry 300x300+2+2 -tile 4x3 "${frame}"
  sleep 2
done

convert -delay 50 frame-*.png -adjoin "${output}"
