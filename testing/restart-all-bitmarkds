#!/bin/sh
# stop all bitmarkd run by bm-tester and then restart them all

ERROR() {
  printf 'error: '
  printf "${@}"
  printf '\n'
  exit 1
}

VERBOSE() {
  [ X"${verbose}" = X"no" ] && return 0
  printf "${@}"
  printf '\n'
}

USAGE() {
  if [ -n "${1}" ]
  then
    printf 'error: '
    printf "${@}"
    printf '\n'
  fi
  cat <<EOF
usage: ${0##*/} <options>
       --help           -h         this message
       --verbose        -v         more messages
       --copy-from=N    -f N       copy database from node N, backup first
       --peer-delete    -p         delete peers.json
       --log-delete     -d         delete logs/*
       --reset-data     -r         remove DB, but backup first
       --sequence=DELAY -s DELAY   delay seconds befor starting each bitmarkd
       --debug          -D         show debug information
EOF
  exit 1
}


# main program

verbose=no
bitmarkd_count=12
from=
peer_delete=no
log_delete=no
reset=no
sequence_delay=
config_root="${HOME}/.config/bitmarkd"

# parse options
while getopts :hvf:plrs:D-: option
do
  # convert long options
  if [ X"${option}" = X"-" ]
  then
    option="${OPTARG%%=*}"
    OPTARG="${OPTARG#${option}}"
    OPTARG="${OPTARG#=}"
  fi
  case "${option}" in
    (v|verbose)
      verbose=yes
      ;;

    (-f|--copy-from)
      from="${OPTARG}"
      ;;

    (p|peer-delete)
      peer_delete=yes
      ;;

    (l|log-delete)
      log_delete=yes
      ;;

    (r|reset-data)
      reset=yes
      ;;

    (s|sequence)
      sequence_delay="${OPTARG}"
      ;;

    (--)
      break
      ;;

    (D|debug)
      debug=yes
      ;;

    (h|help)
      USAGE
      ;;

    ('?')
      USAGE 'invalid option: -%s' "${OPTARG}"
      ;;

    (*)
      USAGE 'invalid option: --%s' "${option}"
      ;;
  esac
done

shift $((OPTIND - 1))

# verify arguments
[ ${#} -ne 0 ] && USAGE 'extraneous arguments: %s' "${*}"

[ -n "${from}" ] && [ -n "${from#[1-9]}" ] && ERROR 'invalid --copy=from="%s"' "${from}"

# enable debugging
[ X"${debug}" = X"yes" ] && set -x

# stop all existing bitmarkds
killall bitmarkd

# if backup
src_dir=''
if [ -n "${from}" ]
then
  src_dir="${config_root}${from}/data"
  [ -d "${src_dir}" ] || ERROR 'data directory: "%s" does not exist' "${src_dir}"
fi

# need to backup/reset database?
if [ -n "${src_dir}" ] || [ X"${reset}" = X"yes" ]
then
  date=$(date +'%Y-%m-%d_%H-%M-%S')
  for i in $(seq 1 "${bitmarkd_count}")
  do
    [ X"${i}" = X"${from}" ] && continue
    dst_dir="${config_root}${i}/data"
    bk_dir="${config_root}${i}/data.${date}"

    if [ -d "${dst_dir}" ]
    then
      printf 'backup database[%d] to: %s\n' "${i}" "${bk_dir}"
      mv "${dst_dir}" "${bk_dir}"
    fi

    rm -fr "${config_root}${i}/local-cache"
    rm -fr "${config_root}${i}/local-btc-cache"
    rm -fr "${config_root}${i}/local-ltc-cache"

    if [ -n "${src_dir}" ]
    then
      printf 'copy database to: %s\n' "${dst_dir}"
      rsync -cavHxP --delete "${src_dir}/"  "${dst_dir}/"
    fi
  done

fi

tmux list-panes -a -F '#{pane_id} #{pane_title}' | (
  while read -r id command config other
  do
    case "${command}" in
      (run-bitmarkd)
        n="${config##*%}"
        [ X"${peer_delete}" = X"yes" ] && rm -rf "${HOME}/.config/bitmarkd${n}"/*-cache/
        [ X"${log_delete}" = X"yes" ] && rm -f "${HOME}/.config/bitmarkd${n}/log/"bitmarkd.log*
        printf '%s â†’ bitmarkd: %s\n' "${id}" "${n}"
        tmux send-keys -t "${id}" 'y' 'C-j'
        [ -n "${sequence_delay}" ] && sleep "${sequence_delay}"
        ;;
      (*)
        ;;
    esac
  done
)
