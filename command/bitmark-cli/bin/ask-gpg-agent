#!/bin/sh
# obtain and cache a password from gpg-agent

ERROR() {
  printf 'error: ' >&2
  printf "${@}" >&2
  printf '\n' >&2
  exit 1
}

VERBOSE() {
  [ X"${verbose}" = X"no" ] && return 0
  printf "${@}"
  printf '\n'
}

USAGE() {
  if [ -n "${1}" ]
  then
    printf 'error: '
    printf "${@}"
    printf '\n'
  fi
  cat <<EOF
usage: ${0##*/} cache-id error prompt description
       --help             -h            this message
       --verbose          -v            more messages
       --confirm=N        -c N          require N confirmations
       --clear            -C            clear previous passphrase
       --debug            -D            show debug information
EOF
  exit 1
}

# main program
verbose=no
debug=no
confirm=0
clear=no

xxd="$(command -v xxd 2>/dev/null)"
[ -x "${xxd}" ] || ERROR 'missing "xxd" try: sudo pkg install editors/vim-console'

# parse options
while getopts :hvc:CD-: option
do
  # convert long options
  if [ X"${option}" = X"-" ]
  then
    option="${OPTARG%%=*}"
    OPTARG="${OPTARG#${option}}"
    OPTARG="${OPTARG#=}"
  fi
  case "${option}" in
    (v|verbose)
      verbose=yes
      ;;

    (c|confirm)
      confirm="${OPTARG}"
      [ -z "${confirm}" ] && USAGE 'confirm cannot be blank'
      [ -z "$(printf '%s' "${confirm}" | tr -d '0-9')" ] || USAGE 'confirm="%s" must be numeric' "${confirm}"
      ;;

    (C|clear)
      clear=yes
      ;;

    (--)
      break
      ;;

    (D|debug)
      debug=yes
      ;;

    (h|help)
      USAGE
      ;;

    ('?')
      USAGE 'invalid option: -%s' "${OPTARG}"
      ;;

    (*)
      USAGE 'invalid option: --%s' "${option}"
      ;;
  esac
done

shift $((OPTIND - 1))

# verify arguments
#[ ${#} -ne 0 ] && USAGE 'extraneous arguments: %s' "${*}"
[ ${#} -ne 4 ] && USAGE 'incorrect number of arguments'

# enable debugging
[ X"${debug}" = X"yes" ] && set -x

# process arguments
cache_id="${1}"
error="$(printf '%s' "${2}" | sed 's/ /%20/g')"
prompt="$(printf '%s' "${3}" | sed 's/ /%20/g')"
description="$(printf '%s' "${4}" | sed 's/ /%20/g')"

[ -z "${cache_id}" ] && USAGE 'cache-id cannot be blank'
[ -z "${error}" ] && error=X
[ -z "${prompt}" ] && prompt=X
[ -z "${description}" ] && USAGE 'description cannot be blank'

# if on ssh connection reset tty to avoid X11 access
[ -n "${SSH_TTY}" ] && export GPG_TTY="${SSH_TTY}"

[ X"${clear}" = X"yes" ] && printf 'CLEAR_PASSPHRASE --mode=normal %s' "${cache_id}" | gpg-connect-agent --decode --hex > /dev/null

result=$(printf 'GET_PASSPHRASE --repeat=%d %s %s %s %s\n' "${confirm}" "${cache_id}" "${error}" "${prompt}" "${description}" | gpg-connect-agent --decode --hex)

case "${result}" in
  (OK*)
    result="${result#OK }"
    printf '%s\n' "${result}" | xxd -r -p
    ;;

  (*)
    ERROR '%s' "${result}"
    ;;
esac
